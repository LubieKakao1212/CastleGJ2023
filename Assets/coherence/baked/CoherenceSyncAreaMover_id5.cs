// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_b4c21c4eeb39050428b8a17907da928c_766826dc_8086_415c_94fa_8538963948c1 : PositionBinding
	{
		public override string CoherenceComponentName => "WorldPosition";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override Vector3 Value
		{
			get => (Vector3)(UnityEngine.Vector3)(coherenceSync.coherencePosition);
			set => coherenceSync.coherencePosition = (UnityEngine.Vector3)(value);
		}

		protected override Vector3 ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
		{
			var value = ((WorldPosition)coherenceComponent).value;
			if (!coherenceSync.HasParentWithCoherenceSync)
            {
                value += floatingOriginDelta;
            }
			return value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldPosition)coherenceComponent;
			update.value = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new WorldPosition();
		}
	}


	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'AreaMover' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncAreaMover_id5 : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached targets for commands		
		private MapJoin AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2_CommandTarget;

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;

			logger = coherenceSync.logger.With<CoherenceSyncAreaMover_id5>();
			if (coherenceSync.TryGetBindingByGuid("7b12f40c-7295-45d5-acf7-e6a4ced8efe2", "RequestSpawnpoint", out Binding AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2))
			{
				AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2_CommandTarget = (MapJoin)AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2.UnityComponent;
				coherenceSync.AddCommandRequestDelegate("MapJoin.RequestSpawnpoint", "(Coherence.Toolkit.CoherenceSync)",
				SendCommand_AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2, ReceiveLocalCommand_AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2, MessageTarget.AuthorityOnly, AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2_CommandTarget,false);
			}
			else
			{
				logger.Error("Couldn't find command binding (RequestSpawnpoint)");
			}
			if (coherenceSync.TryGetBindingByGuid("766826dc-8086-415c-94fa-8538963948c1", "position", out Binding InternalWorldPosition_Translation_value))
			{
				var clone = new Binding_b4c21c4eeb39050428b8a17907da928c_766826dc_8086_415c_94fa_8538963948c1();
				InternalWorldPosition_Translation_value.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalWorldPosition_Translation_value)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Transform).position");
			}
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime && (Archetypes.IndexForName.TryGetValue(coherenceSync.Archetype.ArchetypeName, out int archetypeIndex)))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
			else
			{
				logger.Warning($"Unable to find archetype {coherenceSync.Archetype.ArchetypeName} in dictionary. Please, bake manually (coherence > Bake)");
			}

			return null;
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}
			this.client = client;
		}
		void SendCommand_AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2(MessageTarget target, object[] args)
		{
			var command = new AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2();
			int i = 0;
			command.player = (SerializeEntityID)monoBridge.UnityObjectToEntityId(args[i++] as CoherenceSync);
			client.SendCommand(command, target, coherenceSync.EntityID);
		}

		void ReceiveLocalCommand_AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2(MessageTarget target, object[] args)
		{
			var command = new AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2();
			int i = 0;
			command.player = (SerializeEntityID)monoBridge.UnityObjectToEntityId(args[i++] as CoherenceSync);
			ReceiveCommand_AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2(command);
		}

		void ReceiveCommand_AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2(AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2 command)
		{
			var target = AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2_CommandTarget;
			target.RequestSpawnpoint(monoBridge.EntityIdToCoherenceSync(command.player));
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				case AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2 castedCommand:
					ReceiveCommand_AreaMover_id5_MapJoin__char_46_RequestSpawnpoint_7b12f40c_7295_45d5_acf7_e6a4ced8efe2(castedCommand);
					break;
				default:
					logger.Warning($"[CoherenceSyncAreaMover_id5] Unhandled command: {command.GetType()}.");
					break;
			}
		}
	}
}
