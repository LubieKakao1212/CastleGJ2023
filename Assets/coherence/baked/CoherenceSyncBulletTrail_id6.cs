// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using UnityEngine;
	using Coherence.Toolkit;
	using Coherence.Toolkit.Bindings;
	using Coherence.Entity;
	using Coherence.ProtocolDef;
	using Coherence.Brook;
	using Coherence.Toolkit.Bindings.ValueBindings;
	using Coherence.Toolkit.Bindings.TransformBindings;
	using Coherence.Connection;
	using Coherence.Log;
	using Logger = Coherence.Log.Logger;
	using UnityEngine.Scripting;

	public class Binding_8a9e96fc2de52284c98b4f0d8a3ba0a1_d681560b_50b8_4f68_987b_685892649497 : PositionBinding
	{
		public override string CoherenceComponentName => "WorldPosition";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override Vector3 Value
		{
			get => (Vector3)(UnityEngine.Vector3)(coherenceSync.coherencePosition);
			set => coherenceSync.coherencePosition = (UnityEngine.Vector3)(value);
		}

		protected override Vector3 ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
		{
			var value = ((WorldPosition)coherenceComponent).value;
			if (!coherenceSync.HasParentWithCoherenceSync)
            {
                value += floatingOriginDelta;
            }
			return value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (WorldPosition)coherenceComponent;
			update.value = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new WorldPosition();
		}
	}

	public class Binding_8a9e96fc2de52284c98b4f0d8a3ba0a1_c6dcc3ad_6a18_49ee_8661_341cf846f0e4 : Vector3Binding
	{
		private ProjectileTrail CastedUnityComponent;		

		protected override void OnBindingCloned()
		{
			CastedUnityComponent = (ProjectileTrail)UnityComponent;
		}
		public override string CoherenceComponentName => "BulletTrail_id6_ProjectileTrail_4771486144989202667";

		public override uint FieldMask => 0b00000000000000000000000000000001;

		public override Vector3 Value
		{
			get => (Vector3)(UnityEngine.Vector3)(CastedUnityComponent.EndPosSync);
			set => CastedUnityComponent.EndPosSync = (UnityEngine.Vector3)(value);
		}

		protected override Vector3 ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
		{
			var value = ((BulletTrail_id6_ProjectileTrail_4771486144989202667)coherenceComponent).EndPosSync;
			return value;
		}
		
		public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent)
		{
			var update = (BulletTrail_id6_ProjectileTrail_4771486144989202667)coherenceComponent;
			update.EndPosSync = Value;
			return update;
		}

		public override ICoherenceComponentData CreateComponentData()
		{
			return new BulletTrail_id6_ProjectileTrail_4771486144989202667();
		}
	}


	[Preserve]
	[AddComponentMenu("coherence/Baked/Baked 'BulletTrail' (auto assigned)")]
	[RequireComponent(typeof(CoherenceSync))]
	public class CoherenceSyncBulletTrail_id6 : CoherenceSyncBaked
	{
		private CoherenceSync coherenceSync;
		private Logger logger;

		// Cached targets for commands

		private IClient client;
		private CoherenceMonoBridge monoBridge => coherenceSync.MonoBridge;

		protected void Awake()
		{
			coherenceSync = GetComponent<CoherenceSync>();
			coherenceSync.usingReflection = false;

			logger = coherenceSync.logger.With<CoherenceSyncBulletTrail_id6>();
			if (coherenceSync.TryGetBindingByGuid("d681560b-50b8-4f68-987b-685892649497", "position", out Binding InternalWorldPosition_Translation_value))
			{
				var clone = new Binding_8a9e96fc2de52284c98b4f0d8a3ba0a1_d681560b_50b8_4f68_987b_685892649497();
				InternalWorldPosition_Translation_value.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalWorldPosition_Translation_value)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (UnityEngine.Transform).position");
			}
			if (coherenceSync.TryGetBindingByGuid("c6dcc3ad-6a18-49ee-8661-341cf846f0e4", "EndPosSync", out Binding InternalBulletTrail_id6_ProjectileTrail_4771486144989202667_BulletTrail_id6_ProjectileTrail_4771486144989202667_EndPosSync))
			{
				var clone = new Binding_8a9e96fc2de52284c98b4f0d8a3ba0a1_c6dcc3ad_6a18_49ee_8661_341cf846f0e4();
				InternalBulletTrail_id6_ProjectileTrail_4771486144989202667_BulletTrail_id6_ProjectileTrail_4771486144989202667_EndPosSync.CloneTo(clone);
				coherenceSync.Bindings[coherenceSync.Bindings.IndexOf(InternalBulletTrail_id6_ProjectileTrail_4771486144989202667_BulletTrail_id6_ProjectileTrail_4771486144989202667_EndPosSync)] = clone;
			}
			else
			{
				logger.Error("Couldn't find binding (ProjectileTrail).EndPosSync");
			}
		}

		public override List<ICoherenceComponentData> CreateEntity()
		{
			if (coherenceSync.UsesLODsAtRuntime && (Archetypes.IndexForName.TryGetValue(coherenceSync.Archetype.ArchetypeName, out int archetypeIndex)))
			{
				var components = new List<ICoherenceComponentData>()
				{
					new ArchetypeComponent
					{
						index = archetypeIndex
					}
				};

				return components;
			}
			else
			{
				logger.Warning($"Unable to find archetype {coherenceSync.Archetype.ArchetypeName} in dictionary. Please, bake manually (coherence > Bake)");
			}

			return null;
		}

		public override void Initialize(CoherenceSync sync, IClient client)
		{
			if (coherenceSync == null)
			{
				coherenceSync = sync;
			}
			this.client = client;
		}

		public override void ReceiveCommand(IEntityCommand command)
		{
			switch(command)
			{
				default:
					logger.Warning($"[CoherenceSyncBulletTrail_id6] Unhandled command: {command.GetType()}.");
					break;
			}
		}
	}
}
