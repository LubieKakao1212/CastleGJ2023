//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""5788c50e-59f1-427c-b75f-8228b15b41de"",
            ""actions"": [
                {
                    ""name"": ""GamepadHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""47432f98-2042-423c-9918-a785c226e988"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""KeyboardHorizontal"",
                    ""type"": ""Value"",
                    ""id"": ""76e313eb-c373-45b2-a386-636ea238bf6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""1910bacd-182b-4d96-a846-408f5be0df28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePointer"",
                    ""type"": ""Value"",
                    ""id"": ""a188a122-3444-4864-a3eb-047b2b2462c7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EnableController"",
                    ""type"": ""Button"",
                    ""id"": ""36af2553-05f7-42a3-8f21-dd43632a29c2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""29115e59-6838-4aa9-8bb1-af198d0f32cb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e77e280e-c110-4f01-9d70-cf47f11c33ce"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GamepadHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""811c6440-5e08-46fb-9bb7-b60ed9cfe6d9"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a12d959a-8038-44ca-9769-df61695e026d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e6a0419-abe6-47ea-bec5-87fc72291618"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""f64da26e-b1ea-4d85-a69d-db1f7071eac6"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardHorizontal"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""00b99a97-6e9c-4478-b7e6-afbabb4311e8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""507a2ead-3a26-421e-9323-b74579c86cba"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KeyboardHorizontal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""046498f5-7cf6-4f96-b74d-db29737bfdd6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ae6090d-e7bd-4fc3-ac8c-9de49360b232"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_GamepadHorizontal = m_Player.FindAction("GamepadHorizontal", throwIfNotFound: true);
        m_Player_KeyboardHorizontal = m_Player.FindAction("KeyboardHorizontal", throwIfNotFound: true);
        m_Player_Aim = m_Player.FindAction("Aim", throwIfNotFound: true);
        m_Player_MousePointer = m_Player.FindAction("MousePointer", throwIfNotFound: true);
        m_Player_EnableController = m_Player.FindAction("EnableController", throwIfNotFound: true);
        m_Player_Fire = m_Player.FindAction("Fire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_GamepadHorizontal;
    private readonly InputAction m_Player_KeyboardHorizontal;
    private readonly InputAction m_Player_Aim;
    private readonly InputAction m_Player_MousePointer;
    private readonly InputAction m_Player_EnableController;
    private readonly InputAction m_Player_Fire;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @GamepadHorizontal => m_Wrapper.m_Player_GamepadHorizontal;
        public InputAction @KeyboardHorizontal => m_Wrapper.m_Player_KeyboardHorizontal;
        public InputAction @Aim => m_Wrapper.m_Player_Aim;
        public InputAction @MousePointer => m_Wrapper.m_Player_MousePointer;
        public InputAction @EnableController => m_Wrapper.m_Player_EnableController;
        public InputAction @Fire => m_Wrapper.m_Player_Fire;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @GamepadHorizontal.started += instance.OnGamepadHorizontal;
            @GamepadHorizontal.performed += instance.OnGamepadHorizontal;
            @GamepadHorizontal.canceled += instance.OnGamepadHorizontal;
            @KeyboardHorizontal.started += instance.OnKeyboardHorizontal;
            @KeyboardHorizontal.performed += instance.OnKeyboardHorizontal;
            @KeyboardHorizontal.canceled += instance.OnKeyboardHorizontal;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @MousePointer.started += instance.OnMousePointer;
            @MousePointer.performed += instance.OnMousePointer;
            @MousePointer.canceled += instance.OnMousePointer;
            @EnableController.started += instance.OnEnableController;
            @EnableController.performed += instance.OnEnableController;
            @EnableController.canceled += instance.OnEnableController;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @GamepadHorizontal.started -= instance.OnGamepadHorizontal;
            @GamepadHorizontal.performed -= instance.OnGamepadHorizontal;
            @GamepadHorizontal.canceled -= instance.OnGamepadHorizontal;
            @KeyboardHorizontal.started -= instance.OnKeyboardHorizontal;
            @KeyboardHorizontal.performed -= instance.OnKeyboardHorizontal;
            @KeyboardHorizontal.canceled -= instance.OnKeyboardHorizontal;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @MousePointer.started -= instance.OnMousePointer;
            @MousePointer.performed -= instance.OnMousePointer;
            @MousePointer.canceled -= instance.OnMousePointer;
            @EnableController.started -= instance.OnEnableController;
            @EnableController.performed -= instance.OnEnableController;
            @EnableController.canceled -= instance.OnEnableController;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnGamepadHorizontal(InputAction.CallbackContext context);
        void OnKeyboardHorizontal(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnMousePointer(InputAction.CallbackContext context);
        void OnEnableController(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
